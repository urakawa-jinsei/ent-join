// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
	"github.com/ent-join/ent/predicate"
	"github.com/ent-join/ent/uploadedcontent"
)

// ContentUpdate is the builder for updating Content entities.
type ContentUpdate struct {
	config
	hooks    []Hook
	mutation *ContentMutation
}

// Where appends a list predicates to the ContentUpdate builder.
func (cu *ContentUpdate) Where(ps ...predicate.Content) *ContentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUploadedContentFilename sets the "uploaded_content_filename" field.
func (cu *ContentUpdate) SetUploadedContentFilename(s string) *ContentUpdate {
	cu.mutation.SetUploadedContentFilename(s)
	return cu
}

// SetNillableUploadedContentFilename sets the "uploaded_content_filename" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableUploadedContentFilename(s *string) *ContentUpdate {
	if s != nil {
		cu.SetUploadedContentFilename(*s)
	}
	return cu
}

// SetUploadedContentID sets the "uploaded_content" edge to the UploadedContent entity by ID.
func (cu *ContentUpdate) SetUploadedContentID(id string) *ContentUpdate {
	cu.mutation.SetUploadedContentID(id)
	return cu
}

// SetUploadedContent sets the "uploaded_content" edge to the UploadedContent entity.
func (cu *ContentUpdate) SetUploadedContent(u *UploadedContent) *ContentUpdate {
	return cu.SetUploadedContentID(u.ID)
}

// SetContentMovieMetadataID sets the "content_movie_metadata" edge to the ContentMovieMetadata entity by ID.
func (cu *ContentUpdate) SetContentMovieMetadataID(id string) *ContentUpdate {
	cu.mutation.SetContentMovieMetadataID(id)
	return cu
}

// SetContentMovieMetadata sets the "content_movie_metadata" edge to the ContentMovieMetadata entity.
func (cu *ContentUpdate) SetContentMovieMetadata(c *ContentMovieMetadata) *ContentUpdate {
	return cu.SetContentMovieMetadataID(c.ID)
}

// Mutation returns the ContentMutation object of the builder.
func (cu *ContentUpdate) Mutation() *ContentMutation {
	return cu.mutation
}

// ClearUploadedContent clears the "uploaded_content" edge to the UploadedContent entity.
func (cu *ContentUpdate) ClearUploadedContent() *ContentUpdate {
	cu.mutation.ClearUploadedContent()
	return cu
}

// ClearContentMovieMetadata clears the "content_movie_metadata" edge to the ContentMovieMetadata entity.
func (cu *ContentUpdate) ClearContentMovieMetadata() *ContentUpdate {
	cu.mutation.ClearContentMovieMetadata()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContentUpdate) check() error {
	if _, ok := cu.mutation.UploadedContentID(); cu.mutation.UploadedContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.uploaded_content"`)
	}
	if _, ok := cu.mutation.ContentMovieMetadataID(); cu.mutation.ContentMovieMetadataCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.content_movie_metadata"`)
	}
	return nil
}

func (cu *ContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.UploadedContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.UploadedContentTable,
			Columns: []string{content.UploadedContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedcontent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UploadedContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.UploadedContentTable,
			Columns: []string{content.UploadedContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedcontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ContentMovieMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   content.ContentMovieMetadataTable,
			Columns: []string{content.ContentMovieMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContentMovieMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   content.ContentMovieMetadataTable,
			Columns: []string{content.ContentMovieMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContentUpdateOne is the builder for updating a single Content entity.
type ContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentMutation
}

// SetUploadedContentFilename sets the "uploaded_content_filename" field.
func (cuo *ContentUpdateOne) SetUploadedContentFilename(s string) *ContentUpdateOne {
	cuo.mutation.SetUploadedContentFilename(s)
	return cuo
}

// SetNillableUploadedContentFilename sets the "uploaded_content_filename" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableUploadedContentFilename(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetUploadedContentFilename(*s)
	}
	return cuo
}

// SetUploadedContentID sets the "uploaded_content" edge to the UploadedContent entity by ID.
func (cuo *ContentUpdateOne) SetUploadedContentID(id string) *ContentUpdateOne {
	cuo.mutation.SetUploadedContentID(id)
	return cuo
}

// SetUploadedContent sets the "uploaded_content" edge to the UploadedContent entity.
func (cuo *ContentUpdateOne) SetUploadedContent(u *UploadedContent) *ContentUpdateOne {
	return cuo.SetUploadedContentID(u.ID)
}

// SetContentMovieMetadataID sets the "content_movie_metadata" edge to the ContentMovieMetadata entity by ID.
func (cuo *ContentUpdateOne) SetContentMovieMetadataID(id string) *ContentUpdateOne {
	cuo.mutation.SetContentMovieMetadataID(id)
	return cuo
}

// SetContentMovieMetadata sets the "content_movie_metadata" edge to the ContentMovieMetadata entity.
func (cuo *ContentUpdateOne) SetContentMovieMetadata(c *ContentMovieMetadata) *ContentUpdateOne {
	return cuo.SetContentMovieMetadataID(c.ID)
}

// Mutation returns the ContentMutation object of the builder.
func (cuo *ContentUpdateOne) Mutation() *ContentMutation {
	return cuo.mutation
}

// ClearUploadedContent clears the "uploaded_content" edge to the UploadedContent entity.
func (cuo *ContentUpdateOne) ClearUploadedContent() *ContentUpdateOne {
	cuo.mutation.ClearUploadedContent()
	return cuo
}

// ClearContentMovieMetadata clears the "content_movie_metadata" edge to the ContentMovieMetadata entity.
func (cuo *ContentUpdateOne) ClearContentMovieMetadata() *ContentUpdateOne {
	cuo.mutation.ClearContentMovieMetadata()
	return cuo
}

// Where appends a list predicates to the ContentUpdate builder.
func (cuo *ContentUpdateOne) Where(ps ...predicate.Content) *ContentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContentUpdateOne) Select(field string, fields ...string) *ContentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Content entity.
func (cuo *ContentUpdateOne) Save(ctx context.Context) (*Content, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContentUpdateOne) SaveX(ctx context.Context) *Content {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContentUpdateOne) check() error {
	if _, ok := cuo.mutation.UploadedContentID(); cuo.mutation.UploadedContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.uploaded_content"`)
	}
	if _, ok := cuo.mutation.ContentMovieMetadataID(); cuo.mutation.ContentMovieMetadataCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.content_movie_metadata"`)
	}
	return nil
}

func (cuo *ContentUpdateOne) sqlSave(ctx context.Context) (_node *Content, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Content.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, content.FieldID)
		for _, f := range fields {
			if !content.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != content.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.UploadedContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.UploadedContentTable,
			Columns: []string{content.UploadedContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedcontent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UploadedContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.UploadedContentTable,
			Columns: []string{content.UploadedContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadedcontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ContentMovieMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   content.ContentMovieMetadataTable,
			Columns: []string{content.ContentMovieMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContentMovieMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   content.ContentMovieMetadataTable,
			Columns: []string{content.ContentMovieMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Content{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
