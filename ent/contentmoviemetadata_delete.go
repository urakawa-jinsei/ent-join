// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ent-join/ent/contentmoviemetadata"
	"github.com/ent-join/ent/predicate"
)

// ContentMovieMetadataDelete is the builder for deleting a ContentMovieMetadata entity.
type ContentMovieMetadataDelete struct {
	config
	hooks    []Hook
	mutation *ContentMovieMetadataMutation
}

// Where appends a list predicates to the ContentMovieMetadataDelete builder.
func (cmmd *ContentMovieMetadataDelete) Where(ps ...predicate.ContentMovieMetadata) *ContentMovieMetadataDelete {
	cmmd.mutation.Where(ps...)
	return cmmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cmmd *ContentMovieMetadataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cmmd.sqlExec, cmmd.mutation, cmmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmd *ContentMovieMetadataDelete) ExecX(ctx context.Context) int {
	n, err := cmmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cmmd *ContentMovieMetadataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(contentmoviemetadata.Table, sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString))
	if ps := cmmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cmmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cmmd.mutation.done = true
	return affected, err
}

// ContentMovieMetadataDeleteOne is the builder for deleting a single ContentMovieMetadata entity.
type ContentMovieMetadataDeleteOne struct {
	cmmd *ContentMovieMetadataDelete
}

// Where appends a list predicates to the ContentMovieMetadataDelete builder.
func (cmmdo *ContentMovieMetadataDeleteOne) Where(ps ...predicate.ContentMovieMetadata) *ContentMovieMetadataDeleteOne {
	cmmdo.cmmd.mutation.Where(ps...)
	return cmmdo
}

// Exec executes the deletion query.
func (cmmdo *ContentMovieMetadataDeleteOne) Exec(ctx context.Context) error {
	n, err := cmmdo.cmmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{contentmoviemetadata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmdo *ContentMovieMetadataDeleteOne) ExecX(ctx context.Context) {
	if err := cmmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
