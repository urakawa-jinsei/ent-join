// Code generated by ent, DO NOT EDIT.

package contentmoviemetadata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contentmoviemetadata type in the database.
	Label = "content_movie_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "filename"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// EdgeContent holds the string denoting the content edge name in mutations.
	EdgeContent = "content"
	// Table holds the table name of the contentmoviemetadata in the database.
	Table = "content_movie_metadata"
	// ContentTable is the table that holds the content relation/edge.
	ContentTable = "content_movie_metadata"
	// ContentInverseTable is the table name for the Content entity.
	// It exists in this package in order to avoid circular dependency with the "content" package.
	ContentInverseTable = "content"
	// ContentColumn is the table column denoting the content relation/edge.
	ContentColumn = "filename"
)

// Columns holds all SQL columns for contentmoviemetadata fields.
var Columns = []string{
	FieldID,
	FieldWidth,
	FieldHeight,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the ContentMovieMetadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByContentField orders the results by content field.
func ByContentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentStep(), sql.OrderByField(field, opts...))
	}
}
func newContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ContentTable, ContentColumn),
	)
}
