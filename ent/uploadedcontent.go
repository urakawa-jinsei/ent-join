// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ent-join/ent/uploadedcontent"
)

// UploadedContent is the model entity for the UploadedContent schema.
type UploadedContent struct {
	config
	// ID of the ent.
	ID string `json:"filename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UploadedContentQuery when eager-loading is set.
	Edges        UploadedContentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UploadedContentEdges holds the relations/edges for other nodes in the graph.
type UploadedContentEdges struct {
	// Contents holds the value of the contents edge.
	Contents []*Content `json:"contents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContentsOrErr returns the Contents value or an error if the edge
// was not loaded in eager-loading.
func (e UploadedContentEdges) ContentsOrErr() ([]*Content, error) {
	if e.loadedTypes[0] {
		return e.Contents, nil
	}
	return nil, &NotLoadedError{edge: "contents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UploadedContent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uploadedcontent.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UploadedContent fields.
func (uc *UploadedContent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uploadedcontent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uc.ID = value.String
			}
		default:
			uc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UploadedContent.
// This includes values selected through modifiers, order, etc.
func (uc *UploadedContent) Value(name string) (ent.Value, error) {
	return uc.selectValues.Get(name)
}

// QueryContents queries the "contents" edge of the UploadedContent entity.
func (uc *UploadedContent) QueryContents() *ContentQuery {
	return NewUploadedContentClient(uc.config).QueryContents(uc)
}

// Update returns a builder for updating this UploadedContent.
// Note that you need to call UploadedContent.Unwrap() before calling this method if this UploadedContent
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UploadedContent) Update() *UploadedContentUpdateOne {
	return NewUploadedContentClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UploadedContent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UploadedContent) Unwrap() *UploadedContent {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UploadedContent is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UploadedContent) String() string {
	var builder strings.Builder
	builder.WriteString("UploadedContent(")
	builder.WriteString(fmt.Sprintf("id=%v", uc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// UploadedContents is a parsable slice of UploadedContent.
type UploadedContents []*UploadedContent
