// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
)

// ContentMovieMetadata is the model entity for the ContentMovieMetadata schema.
type ContentMovieMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"filename,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContentMovieMetadataQuery when eager-loading is set.
	Edges        ContentMovieMetadataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ContentMovieMetadataEdges holds the relations/edges for other nodes in the graph.
type ContentMovieMetadataEdges struct {
	// Content holds the value of the content edge.
	Content *Content `json:"content,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContentOrErr returns the Content value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentMovieMetadataEdges) ContentOrErr() (*Content, error) {
	if e.loadedTypes[0] {
		if e.Content == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: content.Label}
		}
		return e.Content, nil
	}
	return nil, &NotLoadedError{edge: "content"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContentMovieMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contentmoviemetadata.FieldWidth, contentmoviemetadata.FieldHeight:
			values[i] = new(sql.NullInt64)
		case contentmoviemetadata.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContentMovieMetadata fields.
func (cmm *ContentMovieMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contentmoviemetadata.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cmm.ID = value.String
			}
		case contentmoviemetadata.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				cmm.Width = int(value.Int64)
			}
		case contentmoviemetadata.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				cmm.Height = int(value.Int64)
			}
		default:
			cmm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContentMovieMetadata.
// This includes values selected through modifiers, order, etc.
func (cmm *ContentMovieMetadata) Value(name string) (ent.Value, error) {
	return cmm.selectValues.Get(name)
}

// QueryContent queries the "content" edge of the ContentMovieMetadata entity.
func (cmm *ContentMovieMetadata) QueryContent() *ContentQuery {
	return NewContentMovieMetadataClient(cmm.config).QueryContent(cmm)
}

// Update returns a builder for updating this ContentMovieMetadata.
// Note that you need to call ContentMovieMetadata.Unwrap() before calling this method if this ContentMovieMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (cmm *ContentMovieMetadata) Update() *ContentMovieMetadataUpdateOne {
	return NewContentMovieMetadataClient(cmm.config).UpdateOne(cmm)
}

// Unwrap unwraps the ContentMovieMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cmm *ContentMovieMetadata) Unwrap() *ContentMovieMetadata {
	_tx, ok := cmm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContentMovieMetadata is not a transactional entity")
	}
	cmm.config.driver = _tx.drv
	return cmm
}

// String implements the fmt.Stringer.
func (cmm *ContentMovieMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("ContentMovieMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cmm.ID))
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", cmm.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", cmm.Height))
	builder.WriteByte(')')
	return builder.String()
}

// ContentMovieMetadataSlice is a parsable slice of ContentMovieMetadata.
type ContentMovieMetadataSlice []*ContentMovieMetadata
