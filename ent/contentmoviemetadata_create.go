// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
)

// ContentMovieMetadataCreate is the builder for creating a ContentMovieMetadata entity.
type ContentMovieMetadataCreate struct {
	config
	mutation *ContentMovieMetadataMutation
	hooks    []Hook
}

// SetWidth sets the "width" field.
func (cmmc *ContentMovieMetadataCreate) SetWidth(i int) *ContentMovieMetadataCreate {
	cmmc.mutation.SetWidth(i)
	return cmmc
}

// SetHeight sets the "height" field.
func (cmmc *ContentMovieMetadataCreate) SetHeight(i int) *ContentMovieMetadataCreate {
	cmmc.mutation.SetHeight(i)
	return cmmc
}

// SetID sets the "id" field.
func (cmmc *ContentMovieMetadataCreate) SetID(s string) *ContentMovieMetadataCreate {
	cmmc.mutation.SetID(s)
	return cmmc
}

// SetContentID sets the "content" edge to the Content entity by ID.
func (cmmc *ContentMovieMetadataCreate) SetContentID(id string) *ContentMovieMetadataCreate {
	cmmc.mutation.SetContentID(id)
	return cmmc
}

// SetNillableContentID sets the "content" edge to the Content entity by ID if the given value is not nil.
func (cmmc *ContentMovieMetadataCreate) SetNillableContentID(id *string) *ContentMovieMetadataCreate {
	if id != nil {
		cmmc = cmmc.SetContentID(*id)
	}
	return cmmc
}

// SetContent sets the "content" edge to the Content entity.
func (cmmc *ContentMovieMetadataCreate) SetContent(c *Content) *ContentMovieMetadataCreate {
	return cmmc.SetContentID(c.ID)
}

// Mutation returns the ContentMovieMetadataMutation object of the builder.
func (cmmc *ContentMovieMetadataCreate) Mutation() *ContentMovieMetadataMutation {
	return cmmc.mutation
}

// Save creates the ContentMovieMetadata in the database.
func (cmmc *ContentMovieMetadataCreate) Save(ctx context.Context) (*ContentMovieMetadata, error) {
	return withHooks(ctx, cmmc.sqlSave, cmmc.mutation, cmmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmmc *ContentMovieMetadataCreate) SaveX(ctx context.Context) *ContentMovieMetadata {
	v, err := cmmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmmc *ContentMovieMetadataCreate) Exec(ctx context.Context) error {
	_, err := cmmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmc *ContentMovieMetadataCreate) ExecX(ctx context.Context) {
	if err := cmmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmmc *ContentMovieMetadataCreate) check() error {
	if _, ok := cmmc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "ContentMovieMetadata.width"`)}
	}
	if _, ok := cmmc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "ContentMovieMetadata.height"`)}
	}
	if v, ok := cmmc.mutation.ID(); ok {
		if err := contentmoviemetadata.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ContentMovieMetadata.id": %w`, err)}
		}
	}
	return nil
}

func (cmmc *ContentMovieMetadataCreate) sqlSave(ctx context.Context) (*ContentMovieMetadata, error) {
	if err := cmmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ContentMovieMetadata.ID type: %T", _spec.ID.Value)
		}
	}
	cmmc.mutation.id = &_node.ID
	cmmc.mutation.done = true
	return _node, nil
}

func (cmmc *ContentMovieMetadataCreate) createSpec() (*ContentMovieMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &ContentMovieMetadata{config: cmmc.config}
		_spec = sqlgraph.NewCreateSpec(contentmoviemetadata.Table, sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString))
	)
	if id, ok := cmmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cmmc.mutation.Width(); ok {
		_spec.SetField(contentmoviemetadata.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := cmmc.mutation.Height(); ok {
		_spec.SetField(contentmoviemetadata.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if nodes := cmmc.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contentmoviemetadata.ContentTable,
			Columns: []string{contentmoviemetadata.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentMovieMetadataCreateBulk is the builder for creating many ContentMovieMetadata entities in bulk.
type ContentMovieMetadataCreateBulk struct {
	config
	err      error
	builders []*ContentMovieMetadataCreate
}

// Save creates the ContentMovieMetadata entities in the database.
func (cmmcb *ContentMovieMetadataCreateBulk) Save(ctx context.Context) ([]*ContentMovieMetadata, error) {
	if cmmcb.err != nil {
		return nil, cmmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmmcb.builders))
	nodes := make([]*ContentMovieMetadata, len(cmmcb.builders))
	mutators := make([]Mutator, len(cmmcb.builders))
	for i := range cmmcb.builders {
		func(i int, root context.Context) {
			builder := cmmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentMovieMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmmcb *ContentMovieMetadataCreateBulk) SaveX(ctx context.Context) []*ContentMovieMetadata {
	v, err := cmmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmmcb *ContentMovieMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := cmmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmcb *ContentMovieMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := cmmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
