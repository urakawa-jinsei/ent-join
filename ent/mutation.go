// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
	"github.com/ent-join/ent/predicate"
	"github.com/ent-join/ent/uploadedcontent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContent              = "Content"
	TypeContentMovieMetadata = "ContentMovieMetadata"
	TypeUploadedContent      = "UploadedContent"
)

// ContentMutation represents an operation that mutates the Content nodes in the graph.
type ContentMutation struct {
	config
	op                            Op
	typ                           string
	id                            *string
	clearedFields                 map[string]struct{}
	uploaded_content              *string
	cleareduploaded_content       bool
	content_movie_metadata        *string
	clearedcontent_movie_metadata bool
	done                          bool
	oldValue                      func(context.Context) (*Content, error)
	predicates                    []predicate.Content
}

var _ ent.Mutation = (*ContentMutation)(nil)

// contentOption allows management of the mutation configuration using functional options.
type contentOption func(*ContentMutation)

// newContentMutation creates new mutation for the Content entity.
func newContentMutation(c config, op Op, opts ...contentOption) *ContentMutation {
	m := &ContentMutation{
		config:        c,
		op:            op,
		typ:           TypeContent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContentID sets the ID field of the mutation.
func withContentID(id string) contentOption {
	return func(m *ContentMutation) {
		var (
			err   error
			once  sync.Once
			value *Content
		)
		m.oldValue = func(ctx context.Context) (*Content, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Content.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContent sets the old Content of the mutation.
func withContent(node *Content) contentOption {
	return func(m *ContentMutation) {
		m.oldValue = func(context.Context) (*Content, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Content entities.
func (m *ContentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Content.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUploadedContentFilename sets the "uploaded_content_filename" field.
func (m *ContentMutation) SetUploadedContentFilename(s string) {
	m.uploaded_content = &s
}

// UploadedContentFilename returns the value of the "uploaded_content_filename" field in the mutation.
func (m *ContentMutation) UploadedContentFilename() (r string, exists bool) {
	v := m.uploaded_content
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadedContentFilename returns the old "uploaded_content_filename" field's value of the Content entity.
// If the Content object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContentMutation) OldUploadedContentFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadedContentFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadedContentFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadedContentFilename: %w", err)
	}
	return oldValue.UploadedContentFilename, nil
}

// ResetUploadedContentFilename resets all changes to the "uploaded_content_filename" field.
func (m *ContentMutation) ResetUploadedContentFilename() {
	m.uploaded_content = nil
}

// SetUploadedContentID sets the "uploaded_content" edge to the UploadedContent entity by id.
func (m *ContentMutation) SetUploadedContentID(id string) {
	m.uploaded_content = &id
}

// ClearUploadedContent clears the "uploaded_content" edge to the UploadedContent entity.
func (m *ContentMutation) ClearUploadedContent() {
	m.cleareduploaded_content = true
	m.clearedFields[content.FieldUploadedContentFilename] = struct{}{}
}

// UploadedContentCleared reports if the "uploaded_content" edge to the UploadedContent entity was cleared.
func (m *ContentMutation) UploadedContentCleared() bool {
	return m.cleareduploaded_content
}

// UploadedContentID returns the "uploaded_content" edge ID in the mutation.
func (m *ContentMutation) UploadedContentID() (id string, exists bool) {
	if m.uploaded_content != nil {
		return *m.uploaded_content, true
	}
	return
}

// UploadedContentIDs returns the "uploaded_content" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UploadedContentID instead. It exists only for internal usage by the builders.
func (m *ContentMutation) UploadedContentIDs() (ids []string) {
	if id := m.uploaded_content; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUploadedContent resets all changes to the "uploaded_content" edge.
func (m *ContentMutation) ResetUploadedContent() {
	m.uploaded_content = nil
	m.cleareduploaded_content = false
}

// SetContentMovieMetadataID sets the "content_movie_metadata" edge to the ContentMovieMetadata entity by id.
func (m *ContentMutation) SetContentMovieMetadataID(id string) {
	m.content_movie_metadata = &id
}

// ClearContentMovieMetadata clears the "content_movie_metadata" edge to the ContentMovieMetadata entity.
func (m *ContentMutation) ClearContentMovieMetadata() {
	m.clearedcontent_movie_metadata = true
}

// ContentMovieMetadataCleared reports if the "content_movie_metadata" edge to the ContentMovieMetadata entity was cleared.
func (m *ContentMutation) ContentMovieMetadataCleared() bool {
	return m.clearedcontent_movie_metadata
}

// ContentMovieMetadataID returns the "content_movie_metadata" edge ID in the mutation.
func (m *ContentMutation) ContentMovieMetadataID() (id string, exists bool) {
	if m.content_movie_metadata != nil {
		return *m.content_movie_metadata, true
	}
	return
}

// ContentMovieMetadataIDs returns the "content_movie_metadata" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContentMovieMetadataID instead. It exists only for internal usage by the builders.
func (m *ContentMutation) ContentMovieMetadataIDs() (ids []string) {
	if id := m.content_movie_metadata; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContentMovieMetadata resets all changes to the "content_movie_metadata" edge.
func (m *ContentMutation) ResetContentMovieMetadata() {
	m.content_movie_metadata = nil
	m.clearedcontent_movie_metadata = false
}

// Where appends a list predicates to the ContentMutation builder.
func (m *ContentMutation) Where(ps ...predicate.Content) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Content, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Content).
func (m *ContentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.uploaded_content != nil {
		fields = append(fields, content.FieldUploadedContentFilename)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case content.FieldUploadedContentFilename:
		return m.UploadedContentFilename()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case content.FieldUploadedContentFilename:
		return m.OldUploadedContentFilename(ctx)
	}
	return nil, fmt.Errorf("unknown Content field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case content.FieldUploadedContentFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadedContentFilename(v)
		return nil
	}
	return fmt.Errorf("unknown Content field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Content numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Content nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContentMutation) ResetField(name string) error {
	switch name {
	case content.FieldUploadedContentFilename:
		m.ResetUploadedContentFilename()
		return nil
	}
	return fmt.Errorf("unknown Content field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.uploaded_content != nil {
		edges = append(edges, content.EdgeUploadedContent)
	}
	if m.content_movie_metadata != nil {
		edges = append(edges, content.EdgeContentMovieMetadata)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case content.EdgeUploadedContent:
		if id := m.uploaded_content; id != nil {
			return []ent.Value{*id}
		}
	case content.EdgeContentMovieMetadata:
		if id := m.content_movie_metadata; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduploaded_content {
		edges = append(edges, content.EdgeUploadedContent)
	}
	if m.clearedcontent_movie_metadata {
		edges = append(edges, content.EdgeContentMovieMetadata)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContentMutation) EdgeCleared(name string) bool {
	switch name {
	case content.EdgeUploadedContent:
		return m.cleareduploaded_content
	case content.EdgeContentMovieMetadata:
		return m.clearedcontent_movie_metadata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContentMutation) ClearEdge(name string) error {
	switch name {
	case content.EdgeUploadedContent:
		m.ClearUploadedContent()
		return nil
	case content.EdgeContentMovieMetadata:
		m.ClearContentMovieMetadata()
		return nil
	}
	return fmt.Errorf("unknown Content unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContentMutation) ResetEdge(name string) error {
	switch name {
	case content.EdgeUploadedContent:
		m.ResetUploadedContent()
		return nil
	case content.EdgeContentMovieMetadata:
		m.ResetContentMovieMetadata()
		return nil
	}
	return fmt.Errorf("unknown Content edge %s", name)
}

// ContentMovieMetadataMutation represents an operation that mutates the ContentMovieMetadata nodes in the graph.
type ContentMovieMetadataMutation struct {
	config
	op             Op
	typ            string
	id             *string
	width          *int
	addwidth       *int
	height         *int
	addheight      *int
	clearedFields  map[string]struct{}
	content        *string
	clearedcontent bool
	done           bool
	oldValue       func(context.Context) (*ContentMovieMetadata, error)
	predicates     []predicate.ContentMovieMetadata
}

var _ ent.Mutation = (*ContentMovieMetadataMutation)(nil)

// contentmoviemetadataOption allows management of the mutation configuration using functional options.
type contentmoviemetadataOption func(*ContentMovieMetadataMutation)

// newContentMovieMetadataMutation creates new mutation for the ContentMovieMetadata entity.
func newContentMovieMetadataMutation(c config, op Op, opts ...contentmoviemetadataOption) *ContentMovieMetadataMutation {
	m := &ContentMovieMetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeContentMovieMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContentMovieMetadataID sets the ID field of the mutation.
func withContentMovieMetadataID(id string) contentmoviemetadataOption {
	return func(m *ContentMovieMetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *ContentMovieMetadata
		)
		m.oldValue = func(ctx context.Context) (*ContentMovieMetadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContentMovieMetadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContentMovieMetadata sets the old ContentMovieMetadata of the mutation.
func withContentMovieMetadata(node *ContentMovieMetadata) contentmoviemetadataOption {
	return func(m *ContentMovieMetadataMutation) {
		m.oldValue = func(context.Context) (*ContentMovieMetadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContentMovieMetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContentMovieMetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ContentMovieMetadata entities.
func (m *ContentMovieMetadataMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContentMovieMetadataMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContentMovieMetadataMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ContentMovieMetadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWidth sets the "width" field.
func (m *ContentMovieMetadataMutation) SetWidth(i int) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *ContentMovieMetadataMutation) Width() (r int, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the ContentMovieMetadata entity.
// If the ContentMovieMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContentMovieMetadataMutation) OldWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *ContentMovieMetadataMutation) AddWidth(i int) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *ContentMovieMetadataMutation) AddedWidth() (r int, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *ContentMovieMetadataMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the "height" field.
func (m *ContentMovieMetadataMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *ContentMovieMetadataMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the ContentMovieMetadata entity.
// If the ContentMovieMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContentMovieMetadataMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *ContentMovieMetadataMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *ContentMovieMetadataMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *ContentMovieMetadataMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetContentID sets the "content" edge to the Content entity by id.
func (m *ContentMovieMetadataMutation) SetContentID(id string) {
	m.content = &id
}

// ClearContent clears the "content" edge to the Content entity.
func (m *ContentMovieMetadataMutation) ClearContent() {
	m.clearedcontent = true
}

// ContentCleared reports if the "content" edge to the Content entity was cleared.
func (m *ContentMovieMetadataMutation) ContentCleared() bool {
	return m.clearedcontent
}

// ContentID returns the "content" edge ID in the mutation.
func (m *ContentMovieMetadataMutation) ContentID() (id string, exists bool) {
	if m.content != nil {
		return *m.content, true
	}
	return
}

// ContentIDs returns the "content" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContentID instead. It exists only for internal usage by the builders.
func (m *ContentMovieMetadataMutation) ContentIDs() (ids []string) {
	if id := m.content; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContent resets all changes to the "content" edge.
func (m *ContentMovieMetadataMutation) ResetContent() {
	m.content = nil
	m.clearedcontent = false
}

// Where appends a list predicates to the ContentMovieMetadataMutation builder.
func (m *ContentMovieMetadataMutation) Where(ps ...predicate.ContentMovieMetadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContentMovieMetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContentMovieMetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ContentMovieMetadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContentMovieMetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContentMovieMetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ContentMovieMetadata).
func (m *ContentMovieMetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContentMovieMetadataMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.width != nil {
		fields = append(fields, contentmoviemetadata.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, contentmoviemetadata.FieldHeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContentMovieMetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contentmoviemetadata.FieldWidth:
		return m.Width()
	case contentmoviemetadata.FieldHeight:
		return m.Height()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContentMovieMetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contentmoviemetadata.FieldWidth:
		return m.OldWidth(ctx)
	case contentmoviemetadata.FieldHeight:
		return m.OldHeight(ctx)
	}
	return nil, fmt.Errorf("unknown ContentMovieMetadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContentMovieMetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contentmoviemetadata.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case contentmoviemetadata.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	}
	return fmt.Errorf("unknown ContentMovieMetadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContentMovieMetadataMutation) AddedFields() []string {
	var fields []string
	if m.addwidth != nil {
		fields = append(fields, contentmoviemetadata.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, contentmoviemetadata.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContentMovieMetadataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contentmoviemetadata.FieldWidth:
		return m.AddedWidth()
	case contentmoviemetadata.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContentMovieMetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contentmoviemetadata.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case contentmoviemetadata.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown ContentMovieMetadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContentMovieMetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContentMovieMetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContentMovieMetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ContentMovieMetadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContentMovieMetadataMutation) ResetField(name string) error {
	switch name {
	case contentmoviemetadata.FieldWidth:
		m.ResetWidth()
		return nil
	case contentmoviemetadata.FieldHeight:
		m.ResetHeight()
		return nil
	}
	return fmt.Errorf("unknown ContentMovieMetadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContentMovieMetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.content != nil {
		edges = append(edges, contentmoviemetadata.EdgeContent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContentMovieMetadataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contentmoviemetadata.EdgeContent:
		if id := m.content; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContentMovieMetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContentMovieMetadataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContentMovieMetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontent {
		edges = append(edges, contentmoviemetadata.EdgeContent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContentMovieMetadataMutation) EdgeCleared(name string) bool {
	switch name {
	case contentmoviemetadata.EdgeContent:
		return m.clearedcontent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContentMovieMetadataMutation) ClearEdge(name string) error {
	switch name {
	case contentmoviemetadata.EdgeContent:
		m.ClearContent()
		return nil
	}
	return fmt.Errorf("unknown ContentMovieMetadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContentMovieMetadataMutation) ResetEdge(name string) error {
	switch name {
	case contentmoviemetadata.EdgeContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown ContentMovieMetadata edge %s", name)
}

// UploadedContentMutation represents an operation that mutates the UploadedContent nodes in the graph.
type UploadedContentMutation struct {
	config
	op              Op
	typ             string
	id              *string
	clearedFields   map[string]struct{}
	contents        map[string]struct{}
	removedcontents map[string]struct{}
	clearedcontents bool
	done            bool
	oldValue        func(context.Context) (*UploadedContent, error)
	predicates      []predicate.UploadedContent
}

var _ ent.Mutation = (*UploadedContentMutation)(nil)

// uploadedcontentOption allows management of the mutation configuration using functional options.
type uploadedcontentOption func(*UploadedContentMutation)

// newUploadedContentMutation creates new mutation for the UploadedContent entity.
func newUploadedContentMutation(c config, op Op, opts ...uploadedcontentOption) *UploadedContentMutation {
	m := &UploadedContentMutation{
		config:        c,
		op:            op,
		typ:           TypeUploadedContent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUploadedContentID sets the ID field of the mutation.
func withUploadedContentID(id string) uploadedcontentOption {
	return func(m *UploadedContentMutation) {
		var (
			err   error
			once  sync.Once
			value *UploadedContent
		)
		m.oldValue = func(ctx context.Context) (*UploadedContent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UploadedContent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUploadedContent sets the old UploadedContent of the mutation.
func withUploadedContent(node *UploadedContent) uploadedcontentOption {
	return func(m *UploadedContentMutation) {
		m.oldValue = func(context.Context) (*UploadedContent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UploadedContentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UploadedContentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UploadedContent entities.
func (m *UploadedContentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UploadedContentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UploadedContentMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UploadedContent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddContentIDs adds the "contents" edge to the Content entity by ids.
func (m *UploadedContentMutation) AddContentIDs(ids ...string) {
	if m.contents == nil {
		m.contents = make(map[string]struct{})
	}
	for i := range ids {
		m.contents[ids[i]] = struct{}{}
	}
}

// ClearContents clears the "contents" edge to the Content entity.
func (m *UploadedContentMutation) ClearContents() {
	m.clearedcontents = true
}

// ContentsCleared reports if the "contents" edge to the Content entity was cleared.
func (m *UploadedContentMutation) ContentsCleared() bool {
	return m.clearedcontents
}

// RemoveContentIDs removes the "contents" edge to the Content entity by IDs.
func (m *UploadedContentMutation) RemoveContentIDs(ids ...string) {
	if m.removedcontents == nil {
		m.removedcontents = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.contents, ids[i])
		m.removedcontents[ids[i]] = struct{}{}
	}
}

// RemovedContents returns the removed IDs of the "contents" edge to the Content entity.
func (m *UploadedContentMutation) RemovedContentsIDs() (ids []string) {
	for id := range m.removedcontents {
		ids = append(ids, id)
	}
	return
}

// ContentsIDs returns the "contents" edge IDs in the mutation.
func (m *UploadedContentMutation) ContentsIDs() (ids []string) {
	for id := range m.contents {
		ids = append(ids, id)
	}
	return
}

// ResetContents resets all changes to the "contents" edge.
func (m *UploadedContentMutation) ResetContents() {
	m.contents = nil
	m.clearedcontents = false
	m.removedcontents = nil
}

// Where appends a list predicates to the UploadedContentMutation builder.
func (m *UploadedContentMutation) Where(ps ...predicate.UploadedContent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UploadedContentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UploadedContentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UploadedContent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UploadedContentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UploadedContentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UploadedContent).
func (m *UploadedContentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UploadedContentMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UploadedContentMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UploadedContentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown UploadedContent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadedContentMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadedContent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UploadedContentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UploadedContentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadedContentMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown UploadedContent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UploadedContentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UploadedContentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UploadedContentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UploadedContent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UploadedContentMutation) ResetField(name string) error {
	return fmt.Errorf("unknown UploadedContent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UploadedContentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.contents != nil {
		edges = append(edges, uploadedcontent.EdgeContents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UploadedContentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case uploadedcontent.EdgeContents:
		ids := make([]ent.Value, 0, len(m.contents))
		for id := range m.contents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UploadedContentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcontents != nil {
		edges = append(edges, uploadedcontent.EdgeContents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UploadedContentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case uploadedcontent.EdgeContents:
		ids := make([]ent.Value, 0, len(m.removedcontents))
		for id := range m.removedcontents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UploadedContentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcontents {
		edges = append(edges, uploadedcontent.EdgeContents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UploadedContentMutation) EdgeCleared(name string) bool {
	switch name {
	case uploadedcontent.EdgeContents:
		return m.clearedcontents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UploadedContentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadedContent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UploadedContentMutation) ResetEdge(name string) error {
	switch name {
	case uploadedcontent.EdgeContents:
		m.ResetContents()
		return nil
	}
	return fmt.Errorf("unknown UploadedContent edge %s", name)
}
