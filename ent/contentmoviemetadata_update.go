// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
	"github.com/ent-join/ent/predicate"
)

// ContentMovieMetadataUpdate is the builder for updating ContentMovieMetadata entities.
type ContentMovieMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *ContentMovieMetadataMutation
}

// Where appends a list predicates to the ContentMovieMetadataUpdate builder.
func (cmmu *ContentMovieMetadataUpdate) Where(ps ...predicate.ContentMovieMetadata) *ContentMovieMetadataUpdate {
	cmmu.mutation.Where(ps...)
	return cmmu
}

// SetWidth sets the "width" field.
func (cmmu *ContentMovieMetadataUpdate) SetWidth(i int) *ContentMovieMetadataUpdate {
	cmmu.mutation.ResetWidth()
	cmmu.mutation.SetWidth(i)
	return cmmu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (cmmu *ContentMovieMetadataUpdate) SetNillableWidth(i *int) *ContentMovieMetadataUpdate {
	if i != nil {
		cmmu.SetWidth(*i)
	}
	return cmmu
}

// AddWidth adds i to the "width" field.
func (cmmu *ContentMovieMetadataUpdate) AddWidth(i int) *ContentMovieMetadataUpdate {
	cmmu.mutation.AddWidth(i)
	return cmmu
}

// SetHeight sets the "height" field.
func (cmmu *ContentMovieMetadataUpdate) SetHeight(i int) *ContentMovieMetadataUpdate {
	cmmu.mutation.ResetHeight()
	cmmu.mutation.SetHeight(i)
	return cmmu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (cmmu *ContentMovieMetadataUpdate) SetNillableHeight(i *int) *ContentMovieMetadataUpdate {
	if i != nil {
		cmmu.SetHeight(*i)
	}
	return cmmu
}

// AddHeight adds i to the "height" field.
func (cmmu *ContentMovieMetadataUpdate) AddHeight(i int) *ContentMovieMetadataUpdate {
	cmmu.mutation.AddHeight(i)
	return cmmu
}

// SetContentID sets the "content" edge to the Content entity by ID.
func (cmmu *ContentMovieMetadataUpdate) SetContentID(id string) *ContentMovieMetadataUpdate {
	cmmu.mutation.SetContentID(id)
	return cmmu
}

// SetContent sets the "content" edge to the Content entity.
func (cmmu *ContentMovieMetadataUpdate) SetContent(c *Content) *ContentMovieMetadataUpdate {
	return cmmu.SetContentID(c.ID)
}

// Mutation returns the ContentMovieMetadataMutation object of the builder.
func (cmmu *ContentMovieMetadataUpdate) Mutation() *ContentMovieMetadataMutation {
	return cmmu.mutation
}

// ClearContent clears the "content" edge to the Content entity.
func (cmmu *ContentMovieMetadataUpdate) ClearContent() *ContentMovieMetadataUpdate {
	cmmu.mutation.ClearContent()
	return cmmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmmu *ContentMovieMetadataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmmu.sqlSave, cmmu.mutation, cmmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmmu *ContentMovieMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := cmmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmmu *ContentMovieMetadataUpdate) Exec(ctx context.Context) error {
	_, err := cmmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmu *ContentMovieMetadataUpdate) ExecX(ctx context.Context) {
	if err := cmmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmmu *ContentMovieMetadataUpdate) check() error {
	if _, ok := cmmu.mutation.ContentID(); cmmu.mutation.ContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContentMovieMetadata.content"`)
	}
	return nil
}

func (cmmu *ContentMovieMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentmoviemetadata.Table, contentmoviemetadata.Columns, sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString))
	if ps := cmmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmmu.mutation.Width(); ok {
		_spec.SetField(contentmoviemetadata.FieldWidth, field.TypeInt, value)
	}
	if value, ok := cmmu.mutation.AddedWidth(); ok {
		_spec.AddField(contentmoviemetadata.FieldWidth, field.TypeInt, value)
	}
	if value, ok := cmmu.mutation.Height(); ok {
		_spec.SetField(contentmoviemetadata.FieldHeight, field.TypeInt, value)
	}
	if value, ok := cmmu.mutation.AddedHeight(); ok {
		_spec.AddField(contentmoviemetadata.FieldHeight, field.TypeInt, value)
	}
	if cmmu.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contentmoviemetadata.ContentTable,
			Columns: []string{contentmoviemetadata.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmu.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contentmoviemetadata.ContentTable,
			Columns: []string{contentmoviemetadata.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentmoviemetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmmu.mutation.done = true
	return n, nil
}

// ContentMovieMetadataUpdateOne is the builder for updating a single ContentMovieMetadata entity.
type ContentMovieMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentMovieMetadataMutation
}

// SetWidth sets the "width" field.
func (cmmuo *ContentMovieMetadataUpdateOne) SetWidth(i int) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.ResetWidth()
	cmmuo.mutation.SetWidth(i)
	return cmmuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (cmmuo *ContentMovieMetadataUpdateOne) SetNillableWidth(i *int) *ContentMovieMetadataUpdateOne {
	if i != nil {
		cmmuo.SetWidth(*i)
	}
	return cmmuo
}

// AddWidth adds i to the "width" field.
func (cmmuo *ContentMovieMetadataUpdateOne) AddWidth(i int) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.AddWidth(i)
	return cmmuo
}

// SetHeight sets the "height" field.
func (cmmuo *ContentMovieMetadataUpdateOne) SetHeight(i int) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.ResetHeight()
	cmmuo.mutation.SetHeight(i)
	return cmmuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (cmmuo *ContentMovieMetadataUpdateOne) SetNillableHeight(i *int) *ContentMovieMetadataUpdateOne {
	if i != nil {
		cmmuo.SetHeight(*i)
	}
	return cmmuo
}

// AddHeight adds i to the "height" field.
func (cmmuo *ContentMovieMetadataUpdateOne) AddHeight(i int) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.AddHeight(i)
	return cmmuo
}

// SetContentID sets the "content" edge to the Content entity by ID.
func (cmmuo *ContentMovieMetadataUpdateOne) SetContentID(id string) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.SetContentID(id)
	return cmmuo
}

// SetContent sets the "content" edge to the Content entity.
func (cmmuo *ContentMovieMetadataUpdateOne) SetContent(c *Content) *ContentMovieMetadataUpdateOne {
	return cmmuo.SetContentID(c.ID)
}

// Mutation returns the ContentMovieMetadataMutation object of the builder.
func (cmmuo *ContentMovieMetadataUpdateOne) Mutation() *ContentMovieMetadataMutation {
	return cmmuo.mutation
}

// ClearContent clears the "content" edge to the Content entity.
func (cmmuo *ContentMovieMetadataUpdateOne) ClearContent() *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.ClearContent()
	return cmmuo
}

// Where appends a list predicates to the ContentMovieMetadataUpdate builder.
func (cmmuo *ContentMovieMetadataUpdateOne) Where(ps ...predicate.ContentMovieMetadata) *ContentMovieMetadataUpdateOne {
	cmmuo.mutation.Where(ps...)
	return cmmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmmuo *ContentMovieMetadataUpdateOne) Select(field string, fields ...string) *ContentMovieMetadataUpdateOne {
	cmmuo.fields = append([]string{field}, fields...)
	return cmmuo
}

// Save executes the query and returns the updated ContentMovieMetadata entity.
func (cmmuo *ContentMovieMetadataUpdateOne) Save(ctx context.Context) (*ContentMovieMetadata, error) {
	return withHooks(ctx, cmmuo.sqlSave, cmmuo.mutation, cmmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmmuo *ContentMovieMetadataUpdateOne) SaveX(ctx context.Context) *ContentMovieMetadata {
	node, err := cmmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmmuo *ContentMovieMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := cmmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmmuo *ContentMovieMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := cmmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmmuo *ContentMovieMetadataUpdateOne) check() error {
	if _, ok := cmmuo.mutation.ContentID(); cmmuo.mutation.ContentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ContentMovieMetadata.content"`)
	}
	return nil
}

func (cmmuo *ContentMovieMetadataUpdateOne) sqlSave(ctx context.Context) (_node *ContentMovieMetadata, err error) {
	if err := cmmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contentmoviemetadata.Table, contentmoviemetadata.Columns, sqlgraph.NewFieldSpec(contentmoviemetadata.FieldID, field.TypeString))
	id, ok := cmmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContentMovieMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contentmoviemetadata.FieldID)
		for _, f := range fields {
			if !contentmoviemetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contentmoviemetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmmuo.mutation.Width(); ok {
		_spec.SetField(contentmoviemetadata.FieldWidth, field.TypeInt, value)
	}
	if value, ok := cmmuo.mutation.AddedWidth(); ok {
		_spec.AddField(contentmoviemetadata.FieldWidth, field.TypeInt, value)
	}
	if value, ok := cmmuo.mutation.Height(); ok {
		_spec.SetField(contentmoviemetadata.FieldHeight, field.TypeInt, value)
	}
	if value, ok := cmmuo.mutation.AddedHeight(); ok {
		_spec.AddField(contentmoviemetadata.FieldHeight, field.TypeInt, value)
	}
	if cmmuo.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contentmoviemetadata.ContentTable,
			Columns: []string{contentmoviemetadata.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmmuo.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contentmoviemetadata.ContentTable,
			Columns: []string{contentmoviemetadata.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(content.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContentMovieMetadata{config: cmmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contentmoviemetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmmuo.mutation.done = true
	return _node, nil
}
