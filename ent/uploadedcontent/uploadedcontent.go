// Code generated by ent, DO NOT EDIT.

package uploadedcontent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the uploadedcontent type in the database.
	Label = "uploaded_content"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "filename"
	// EdgeContents holds the string denoting the contents edge name in mutations.
	EdgeContents = "contents"
	// Table holds the table name of the uploadedcontent in the database.
	Table = "uploaded_content"
	// ContentsTable is the table that holds the contents relation/edge.
	ContentsTable = "content"
	// ContentsInverseTable is the table name for the Content entity.
	// It exists in this package in order to avoid circular dependency with the "content" package.
	ContentsInverseTable = "content"
	// ContentsColumn is the table column denoting the contents relation/edge.
	ContentsColumn = "uploaded_content_filename"
)

// Columns holds all SQL columns for uploadedcontent fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the UploadedContent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContentsCount orders the results by contents count.
func ByContentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContentsStep(), opts...)
	}
}

// ByContents orders the results by contents terms.
func ByContents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContentsTable, ContentsColumn),
	)
}
