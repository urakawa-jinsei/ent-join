// Code generated by ent, DO NOT EDIT.

package content

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ent-join/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldID, id))
}

// UploadedContentFilename applies equality check predicate on the "uploaded_content_filename" field. It's identical to UploadedContentFilenameEQ.
func UploadedContentFilename(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameEQ applies the EQ predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameNEQ applies the NEQ predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameNEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameIn applies the In predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldUploadedContentFilename, vs...))
}

// UploadedContentFilenameNotIn applies the NotIn predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameNotIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldUploadedContentFilename, vs...))
}

// UploadedContentFilenameGT applies the GT predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameGT(v string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameGTE applies the GTE predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameGTE(v string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameLT applies the LT predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameLT(v string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameLTE applies the LTE predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameLTE(v string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameContains applies the Contains predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameContains(v string) predicate.Content {
	return predicate.Content(sql.FieldContains(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameHasPrefix applies the HasPrefix predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameHasPrefix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasPrefix(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameHasSuffix applies the HasSuffix predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameHasSuffix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasSuffix(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameEqualFold applies the EqualFold predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameEqualFold(v string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldUploadedContentFilename, v))
}

// UploadedContentFilenameContainsFold applies the ContainsFold predicate on the "uploaded_content_filename" field.
func UploadedContentFilenameContainsFold(v string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldUploadedContentFilename, v))
}

// HasUploadedContent applies the HasEdge predicate on the "uploaded_content" edge.
func HasUploadedContent() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UploadedContentTable, UploadedContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploadedContentWith applies the HasEdge predicate on the "uploaded_content" edge with a given conditions (other predicates).
func HasUploadedContentWith(preds ...predicate.UploadedContent) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newUploadedContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContentMovieMetadata applies the HasEdge predicate on the "content_movie_metadata" edge.
func HasContentMovieMetadata() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ContentMovieMetadataTable, ContentMovieMetadataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentMovieMetadataWith applies the HasEdge predicate on the "content_movie_metadata" edge with a given conditions (other predicates).
func HasContentMovieMetadataWith(preds ...predicate.ContentMovieMetadata) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newContentMovieMetadataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Content) predicate.Content {
	return predicate.Content(sql.NotPredicates(p))
}
