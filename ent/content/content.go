// Code generated by ent, DO NOT EDIT.

package content

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the content type in the database.
	Label = "content"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "filename"
	// FieldUploadedContentFilename holds the string denoting the uploaded_content_filename field in the database.
	FieldUploadedContentFilename = "uploaded_content_filename"
	// EdgeUploadedContent holds the string denoting the uploaded_content edge name in mutations.
	EdgeUploadedContent = "uploaded_content"
	// EdgeContentMovieMetadata holds the string denoting the content_movie_metadata edge name in mutations.
	EdgeContentMovieMetadata = "content_movie_metadata"
	// Table holds the table name of the content in the database.
	Table = "content"
	// UploadedContentTable is the table that holds the uploaded_content relation/edge.
	UploadedContentTable = "content"
	// UploadedContentInverseTable is the table name for the UploadedContent entity.
	// It exists in this package in order to avoid circular dependency with the "uploadedcontent" package.
	UploadedContentInverseTable = "uploaded_content"
	// UploadedContentColumn is the table column denoting the uploaded_content relation/edge.
	UploadedContentColumn = "uploaded_content_filename"
	// ContentMovieMetadataTable is the table that holds the content_movie_metadata relation/edge.
	ContentMovieMetadataTable = "content_movie_metadata"
	// ContentMovieMetadataInverseTable is the table name for the ContentMovieMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "contentmoviemetadata" package.
	ContentMovieMetadataInverseTable = "content_movie_metadata"
	// ContentMovieMetadataColumn is the table column denoting the content_movie_metadata relation/edge.
	ContentMovieMetadataColumn = "filename"
)

// Columns holds all SQL columns for content fields.
var Columns = []string{
	FieldID,
	FieldUploadedContentFilename,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Content queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUploadedContentFilename orders the results by the uploaded_content_filename field.
func ByUploadedContentFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedContentFilename, opts...).ToFunc()
}

// ByUploadedContentField orders the results by uploaded_content field.
func ByUploadedContentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadedContentStep(), sql.OrderByField(field, opts...))
	}
}

// ByContentMovieMetadataField orders the results by content_movie_metadata field.
func ByContentMovieMetadataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentMovieMetadataStep(), sql.OrderByField(field, opts...))
	}
}
func newUploadedContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadedContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploadedContentTable, UploadedContentColumn),
	)
}
func newContentMovieMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentMovieMetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ContentMovieMetadataTable, ContentMovieMetadataColumn),
	)
}
