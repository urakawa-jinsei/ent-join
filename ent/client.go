// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ent-join/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ent-join/ent/content"
	"github.com/ent-join/ent/contentmoviemetadata"
	"github.com/ent-join/ent/uploadedcontent"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Content is the client for interacting with the Content builders.
	Content *ContentClient
	// ContentMovieMetadata is the client for interacting with the ContentMovieMetadata builders.
	ContentMovieMetadata *ContentMovieMetadataClient
	// UploadedContent is the client for interacting with the UploadedContent builders.
	UploadedContent *UploadedContentClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Content = NewContentClient(c.config)
	c.ContentMovieMetadata = NewContentMovieMetadataClient(c.config)
	c.UploadedContent = NewUploadedContentClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Content:              NewContentClient(cfg),
		ContentMovieMetadata: NewContentMovieMetadataClient(cfg),
		UploadedContent:      NewUploadedContentClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Content:              NewContentClient(cfg),
		ContentMovieMetadata: NewContentMovieMetadataClient(cfg),
		UploadedContent:      NewUploadedContentClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Content.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Content.Use(hooks...)
	c.ContentMovieMetadata.Use(hooks...)
	c.UploadedContent.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Content.Intercept(interceptors...)
	c.ContentMovieMetadata.Intercept(interceptors...)
	c.UploadedContent.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ContentMutation:
		return c.Content.mutate(ctx, m)
	case *ContentMovieMetadataMutation:
		return c.ContentMovieMetadata.mutate(ctx, m)
	case *UploadedContentMutation:
		return c.UploadedContent.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ContentClient is a client for the Content schema.
type ContentClient struct {
	config
}

// NewContentClient returns a client for the Content from the given config.
func NewContentClient(c config) *ContentClient {
	return &ContentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `content.Hooks(f(g(h())))`.
func (c *ContentClient) Use(hooks ...Hook) {
	c.hooks.Content = append(c.hooks.Content, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `content.Intercept(f(g(h())))`.
func (c *ContentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Content = append(c.inters.Content, interceptors...)
}

// Create returns a builder for creating a Content entity.
func (c *ContentClient) Create() *ContentCreate {
	mutation := newContentMutation(c.config, OpCreate)
	return &ContentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Content entities.
func (c *ContentClient) CreateBulk(builders ...*ContentCreate) *ContentCreateBulk {
	return &ContentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContentClient) MapCreateBulk(slice any, setFunc func(*ContentCreate, int)) *ContentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContentCreateBulk{err: fmt.Errorf("calling to ContentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Content.
func (c *ContentClient) Update() *ContentUpdate {
	mutation := newContentMutation(c.config, OpUpdate)
	return &ContentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContentClient) UpdateOne(co *Content) *ContentUpdateOne {
	mutation := newContentMutation(c.config, OpUpdateOne, withContent(co))
	return &ContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContentClient) UpdateOneID(id string) *ContentUpdateOne {
	mutation := newContentMutation(c.config, OpUpdateOne, withContentID(id))
	return &ContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Content.
func (c *ContentClient) Delete() *ContentDelete {
	mutation := newContentMutation(c.config, OpDelete)
	return &ContentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContentClient) DeleteOne(co *Content) *ContentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContentClient) DeleteOneID(id string) *ContentDeleteOne {
	builder := c.Delete().Where(content.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContentDeleteOne{builder}
}

// Query returns a query builder for Content.
func (c *ContentClient) Query() *ContentQuery {
	return &ContentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContent},
		inters: c.Interceptors(),
	}
}

// Get returns a Content entity by its id.
func (c *ContentClient) Get(ctx context.Context, id string) (*Content, error) {
	return c.Query().Where(content.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContentClient) GetX(ctx context.Context, id string) *Content {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUploadedContent queries the uploaded_content edge of a Content.
func (c *ContentClient) QueryUploadedContent(co *Content) *UploadedContentQuery {
	query := (&UploadedContentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(content.Table, content.FieldID, id),
			sqlgraph.To(uploadedcontent.Table, uploadedcontent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, content.UploadedContentTable, content.UploadedContentColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContentMovieMetadata queries the content_movie_metadata edge of a Content.
func (c *ContentClient) QueryContentMovieMetadata(co *Content) *ContentMovieMetadataQuery {
	query := (&ContentMovieMetadataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(content.Table, content.FieldID, id),
			sqlgraph.To(contentmoviemetadata.Table, contentmoviemetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, content.ContentMovieMetadataTable, content.ContentMovieMetadataColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContentClient) Hooks() []Hook {
	return c.hooks.Content
}

// Interceptors returns the client interceptors.
func (c *ContentClient) Interceptors() []Interceptor {
	return c.inters.Content
}

func (c *ContentClient) mutate(ctx context.Context, m *ContentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Content mutation op: %q", m.Op())
	}
}

// ContentMovieMetadataClient is a client for the ContentMovieMetadata schema.
type ContentMovieMetadataClient struct {
	config
}

// NewContentMovieMetadataClient returns a client for the ContentMovieMetadata from the given config.
func NewContentMovieMetadataClient(c config) *ContentMovieMetadataClient {
	return &ContentMovieMetadataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contentmoviemetadata.Hooks(f(g(h())))`.
func (c *ContentMovieMetadataClient) Use(hooks ...Hook) {
	c.hooks.ContentMovieMetadata = append(c.hooks.ContentMovieMetadata, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contentmoviemetadata.Intercept(f(g(h())))`.
func (c *ContentMovieMetadataClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContentMovieMetadata = append(c.inters.ContentMovieMetadata, interceptors...)
}

// Create returns a builder for creating a ContentMovieMetadata entity.
func (c *ContentMovieMetadataClient) Create() *ContentMovieMetadataCreate {
	mutation := newContentMovieMetadataMutation(c.config, OpCreate)
	return &ContentMovieMetadataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContentMovieMetadata entities.
func (c *ContentMovieMetadataClient) CreateBulk(builders ...*ContentMovieMetadataCreate) *ContentMovieMetadataCreateBulk {
	return &ContentMovieMetadataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContentMovieMetadataClient) MapCreateBulk(slice any, setFunc func(*ContentMovieMetadataCreate, int)) *ContentMovieMetadataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContentMovieMetadataCreateBulk{err: fmt.Errorf("calling to ContentMovieMetadataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContentMovieMetadataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContentMovieMetadataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContentMovieMetadata.
func (c *ContentMovieMetadataClient) Update() *ContentMovieMetadataUpdate {
	mutation := newContentMovieMetadataMutation(c.config, OpUpdate)
	return &ContentMovieMetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContentMovieMetadataClient) UpdateOne(cmm *ContentMovieMetadata) *ContentMovieMetadataUpdateOne {
	mutation := newContentMovieMetadataMutation(c.config, OpUpdateOne, withContentMovieMetadata(cmm))
	return &ContentMovieMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContentMovieMetadataClient) UpdateOneID(id string) *ContentMovieMetadataUpdateOne {
	mutation := newContentMovieMetadataMutation(c.config, OpUpdateOne, withContentMovieMetadataID(id))
	return &ContentMovieMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContentMovieMetadata.
func (c *ContentMovieMetadataClient) Delete() *ContentMovieMetadataDelete {
	mutation := newContentMovieMetadataMutation(c.config, OpDelete)
	return &ContentMovieMetadataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContentMovieMetadataClient) DeleteOne(cmm *ContentMovieMetadata) *ContentMovieMetadataDeleteOne {
	return c.DeleteOneID(cmm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContentMovieMetadataClient) DeleteOneID(id string) *ContentMovieMetadataDeleteOne {
	builder := c.Delete().Where(contentmoviemetadata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContentMovieMetadataDeleteOne{builder}
}

// Query returns a query builder for ContentMovieMetadata.
func (c *ContentMovieMetadataClient) Query() *ContentMovieMetadataQuery {
	return &ContentMovieMetadataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContentMovieMetadata},
		inters: c.Interceptors(),
	}
}

// Get returns a ContentMovieMetadata entity by its id.
func (c *ContentMovieMetadataClient) Get(ctx context.Context, id string) (*ContentMovieMetadata, error) {
	return c.Query().Where(contentmoviemetadata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContentMovieMetadataClient) GetX(ctx context.Context, id string) *ContentMovieMetadata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContent queries the content edge of a ContentMovieMetadata.
func (c *ContentMovieMetadataClient) QueryContent(cmm *ContentMovieMetadata) *ContentQuery {
	query := (&ContentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cmm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contentmoviemetadata.Table, contentmoviemetadata.FieldID, id),
			sqlgraph.To(content.Table, content.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, contentmoviemetadata.ContentTable, contentmoviemetadata.ContentColumn),
		)
		fromV = sqlgraph.Neighbors(cmm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContentMovieMetadataClient) Hooks() []Hook {
	return c.hooks.ContentMovieMetadata
}

// Interceptors returns the client interceptors.
func (c *ContentMovieMetadataClient) Interceptors() []Interceptor {
	return c.inters.ContentMovieMetadata
}

func (c *ContentMovieMetadataClient) mutate(ctx context.Context, m *ContentMovieMetadataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContentMovieMetadataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContentMovieMetadataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContentMovieMetadataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContentMovieMetadataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContentMovieMetadata mutation op: %q", m.Op())
	}
}

// UploadedContentClient is a client for the UploadedContent schema.
type UploadedContentClient struct {
	config
}

// NewUploadedContentClient returns a client for the UploadedContent from the given config.
func NewUploadedContentClient(c config) *UploadedContentClient {
	return &UploadedContentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uploadedcontent.Hooks(f(g(h())))`.
func (c *UploadedContentClient) Use(hooks ...Hook) {
	c.hooks.UploadedContent = append(c.hooks.UploadedContent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uploadedcontent.Intercept(f(g(h())))`.
func (c *UploadedContentClient) Intercept(interceptors ...Interceptor) {
	c.inters.UploadedContent = append(c.inters.UploadedContent, interceptors...)
}

// Create returns a builder for creating a UploadedContent entity.
func (c *UploadedContentClient) Create() *UploadedContentCreate {
	mutation := newUploadedContentMutation(c.config, OpCreate)
	return &UploadedContentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UploadedContent entities.
func (c *UploadedContentClient) CreateBulk(builders ...*UploadedContentCreate) *UploadedContentCreateBulk {
	return &UploadedContentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UploadedContentClient) MapCreateBulk(slice any, setFunc func(*UploadedContentCreate, int)) *UploadedContentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UploadedContentCreateBulk{err: fmt.Errorf("calling to UploadedContentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UploadedContentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UploadedContentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UploadedContent.
func (c *UploadedContentClient) Update() *UploadedContentUpdate {
	mutation := newUploadedContentMutation(c.config, OpUpdate)
	return &UploadedContentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UploadedContentClient) UpdateOne(uc *UploadedContent) *UploadedContentUpdateOne {
	mutation := newUploadedContentMutation(c.config, OpUpdateOne, withUploadedContent(uc))
	return &UploadedContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UploadedContentClient) UpdateOneID(id string) *UploadedContentUpdateOne {
	mutation := newUploadedContentMutation(c.config, OpUpdateOne, withUploadedContentID(id))
	return &UploadedContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UploadedContent.
func (c *UploadedContentClient) Delete() *UploadedContentDelete {
	mutation := newUploadedContentMutation(c.config, OpDelete)
	return &UploadedContentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UploadedContentClient) DeleteOne(uc *UploadedContent) *UploadedContentDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UploadedContentClient) DeleteOneID(id string) *UploadedContentDeleteOne {
	builder := c.Delete().Where(uploadedcontent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UploadedContentDeleteOne{builder}
}

// Query returns a query builder for UploadedContent.
func (c *UploadedContentClient) Query() *UploadedContentQuery {
	return &UploadedContentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUploadedContent},
		inters: c.Interceptors(),
	}
}

// Get returns a UploadedContent entity by its id.
func (c *UploadedContentClient) Get(ctx context.Context, id string) (*UploadedContent, error) {
	return c.Query().Where(uploadedcontent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UploadedContentClient) GetX(ctx context.Context, id string) *UploadedContent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContents queries the contents edge of a UploadedContent.
func (c *UploadedContentClient) QueryContents(uc *UploadedContent) *ContentQuery {
	query := (&ContentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(uploadedcontent.Table, uploadedcontent.FieldID, id),
			sqlgraph.To(content.Table, content.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, uploadedcontent.ContentsTable, uploadedcontent.ContentsColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UploadedContentClient) Hooks() []Hook {
	return c.hooks.UploadedContent
}

// Interceptors returns the client interceptors.
func (c *UploadedContentClient) Interceptors() []Interceptor {
	return c.inters.UploadedContent
}

func (c *UploadedContentClient) mutate(ctx context.Context, m *UploadedContentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UploadedContentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UploadedContentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UploadedContentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UploadedContentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UploadedContent mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Content, ContentMovieMetadata, UploadedContent []ent.Hook
	}
	inters struct {
		Content, ContentMovieMetadata, UploadedContent []ent.Interceptor
	}
)
